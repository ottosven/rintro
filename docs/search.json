[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started with R",
    "section": "",
    "text": "Welcome\nThis tutorial aims to serve as an introduction to the software package R. Other excellent and much more exhaustive tutorials can be found at the following links:"
  },
  {
    "objectID": "index.html#why-r",
    "href": "index.html#why-r",
    "title": "Getting Started with R",
    "section": "Why R?",
    "text": "Why R?\n\nR is free of charge. On the R project webpage cran.r-project.org, you can download R for Windows, Mac OS, or Linux. Windows users can also directly follow this link: cran.r-project.org/bin/windows/base/\n\nYou can use R via a terminal or install an IDE, which is much more convenient. The celebrated IDE RStudio for R is also free of charge. Download RStudio here: posit.co/download/rstudio-desktop/. Make sure that you install R before installing RStudio.\nWithin RStudio, you can use Quarto, which provides an authoring framework to export your R code/outputs/plots together with LaTeX formulas and text as a PDF file or website in an appealing way. Have a look here. This website is also built with Quarto. You may want to use Quarto for your assignments, term papers, or thesis.\nR is equipped with one of the most flexible and powerful graphics routines available anywhere. Check out these repositories with examples of appealing and informative R graphs: Clean Graphs, R Graph Catalog, Publication Ready Plots.\nOne of the best features of R are the large number of contributed packages from the statistical community. You find R packages for almost any statistical method out there and many statisticians provide R packages to accompany their research.\nR is the de-facto standard for statistical science."
  },
  {
    "objectID": "index.html#matrix-algebra",
    "href": "index.html#matrix-algebra",
    "title": "Getting Started with R",
    "section": "Matrix algebra",
    "text": "Matrix algebra\nR is a matrix-based programming language. Matrix algebra provides an efficient framework for analyzing and implementing econometric methods. To refresh your matrix algebra skills and to learn how to use it in R, please check out my Crash Course on Matrix Algebra in R."
  },
  {
    "objectID": "index.html#accompanying-r-scripts",
    "href": "index.html#accompanying-r-scripts",
    "title": "Getting Started with R",
    "section": "Accompanying R scripts",
    "text": "Accompanying R scripts\nAll R codes of the different sections can be found here:\n\n\nrintro-sec1.R.\n\nrintro-sec2.R."
  },
  {
    "objectID": "baseR.html#short-glossary",
    "href": "baseR.html#short-glossary",
    "title": "\n1  Base R\n",
    "section": "\n1.1 Short Glossary",
    "text": "1.1 Short Glossary\nLet’s start the tutorial with a (very) short glossary:\n\n\nConsole: The thing with the &gt; sign at the beginning.\n\nScript file: An ordinary text file with suffix .R. For instance, yourfilename.R.\n\nWorking directory: The file directory you are working in. If no directory is explicitly specified when loading data, then R assumes that the data is located in the working directory. Useful commands: with getwd(), you get the location of your current working directory, and setwd() allows you to set a new location for it.\n\nWorkspace: This is a hidden file (stored in the working directory as .RData) where all objects you use (e.g., data, matrices, vectors, variables, functions, etc.) are stored. When you close RStudio, you will be asked if you want to save or delete the session’s workspace. If you save it, it will be loaded automatically with the next R session, provided you start R in the corresponding working directory. Useful commands: ls() shows all elements in our current workspace, and rm(list=ls()) deletes all elements in our current workspace."
  },
  {
    "objectID": "baseR.html#first-steps",
    "href": "baseR.html#first-steps",
    "title": "\n1  Base R\n",
    "section": "\n1.2 First Steps",
    "text": "1.2 First Steps\nA good idea is to use a script file like myscipt.R to store your R commands. You can send single lines or marked areas of your R code to the console by pressing the CTRL+RETURN (STRG+ENTER) keys.\nTo start with baby steps, we do some simple calculations:\n\n2+2 # addition\n\n[1] 4\n\n2*2 # multiplication\n\n[1] 4\n\n2/2\n\n[1] 1\n\n2-2\n\n[1] 0\n\n2^3 # exponentiate\n\n[1] 8\n\n\nNote: Anything written after the # sign will be ignored by R, which is very useful for commenting on your code.\nThe assignment operator &lt;- will be your most often-used tool. Here is an example of creating a scalar variable:\n\nx &lt;- 4 \nx\n\n[1] 4\n\n4 -&gt; x # possible but unusual\nx\n\n[1] 4\n\nx = 4\nx\n\n[1] 4\n\n\nNote: The R community loves the &lt;- assignment operator. Alternatively, you can use the = operator."
  },
  {
    "objectID": "baseR.html#vectors-and-functions",
    "href": "baseR.html#vectors-and-functions",
    "title": "\n1  Base R\n",
    "section": "\n1.3 Vectors and functions",
    "text": "1.3 Vectors and functions\nAnd now a more interesting object - a vector:\n\ny = c(2,7,4,1)\ny\n\n[1] 2 7 4 1\n\n\nThe command ls() shows the total content of your current workspace, and the command rm(list=ls()) deletes all elements of your current workspace:\n\nls()\n\n[1] \"has_annotations\" \"x\"               \"y\"              \n\nrm(list=ls())\nls()\n\ncharacter(0)\n\n\nNote: RStudio’s Environment pane also lists all the elements in your current workspace. That is, the command ls() becomes a bit obsolete when working with RStudio.\nLet’s try how we can compute with vectors and scalars in R.\n\nx = 4\ny = c(2,7,4,1)\n\nx*y # each element in the vector y is multiplied by the scalar x\n\n[1]  8 28 16  4\n\ny*y # a term-by-term product of the elements in y\n\n[1]  4 49 16  1\n\n\nThe term-by-term execution, as in the above example, y*y, is a main strength of R. We can conduct many operations vector-wisely:\n\ny^2\n\n[1]  4 49 16  1\n\nlog(y)\n\n[1] 0.6931472 1.9459101 1.3862944 0.0000000\n\nexp(y)\n\n[1]    7.389056 1096.633158   54.598150    2.718282\n\ny-mean(y)\n\n[1] -1.5  3.5  0.5 -2.5\n\n(y-mean(y))/sd(y) # standardization \n\n[1] -0.5669467  1.3228757  0.1889822 -0.9449112\n\n\nElement-wise operations are a central characteristic of matrix-based languages like R (or Matlab). Other programming languages often have to use loops instead:\n\nN = length(y)\n1:N\n\ny.sq = rep(0,N)\ny.sq\n\nfor(i in 1:N){\n  y.sq[i] = y[i]^2\n  if(i == N){\n    print(y.sq)\n  }\n}\n\nThe for()-loop is the most common loop, but there is also a while()-loop and a repeat()-loop. However, loops in R can be relatively slow. Therefore, try to avoid them!\nUseful commands to produce sequences of numbers:\n\n1:10\n-10:10\n?seq # Help for the seq()-function\nseq(from=1, to=100, by=7) # sequence generation\nrep(0,10) # replicate elements\n\nThe []-operator selects elements of vectors:\n\ny[c(2,4)]\n\n[1] 7 1\n\n\nElement selections can be made on a more logical basis, too. For example, if you want only the elements of the vector y that are strictly greater than 2:\n\ny[y&gt;2]\n\n[1] 7 4\n\n# Note that this gives you a boolean vector:\ny&gt;2\n\n[1] FALSE  TRUE  TRUE FALSE\n\n\nNote: Logical operations return so-called boolean objects, i.e., a TRUE or a FALSE. For instance, if we ask R whether 1&gt;2, we get the answer FALSE."
  },
  {
    "objectID": "baseR.html#further-data-objects",
    "href": "baseR.html#further-data-objects",
    "title": "\n1  Base R\n",
    "section": "\n1.4 Further Data Objects",
    "text": "1.4 Further Data Objects\nBesides the classical data objects like scalars and vectors, there are many other objects in R:\n\n1.4.1 The matrix\nA matrix is a rectangular array of numbers.\n\nmymatrix = matrix(data=1:16, nrow=4, ncol=4)\nmymatrix\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n\nMatrices are extremely useful for theoretically analyzing statistical methods and implementing them practically.\n\n\n\n\n\n\nMatrix Algebra in R\n\n\n\nTo refresh your matrix algebra skills with implementations in R, check out my Crash Course on Matrix Algebra in R.\n\n\n\n1.4.2 The list\nIn lists, you can organize different kinds of data. E.g., consider the following example:\n\nmylist = list(\n  \"Some_Numbers\" = c(66, 76, 55, 12, 4, 66, 8, 99), \n  \"Animals\"      = c(\"Rabbit\", \"Cat\", \"Elefant\"),\n  \"My_Series\"    = c(30:1)\n) \n\nA very useful function to find specific values and entries within lists is the str()-function:\n\nstr(mylist)\n\nList of 3\n $ Some_Numbers: num [1:8] 66 76 55 12 4 66 8 99\n $ Animals     : chr [1:3] \"Rabbit\" \"Cat\" \"Elefant\"\n $ My_Series   : int [1:30] 30 29 28 27 26 25 24 23 22 21 ...\n\n\n\n1.4.3 The data frame\nA data.frame is a list object with more formal restrictions (e.g., an equal number of rows for all columns). As indicated by its name, a data.frame object is designed to store data:\n\nmydataframe = data.frame(\n  \"Credit_Default\"   = c( 0, 0, 1, 0, 1, 1), \n  \"Age\"              = c(35,41,55,36,44,26), \n  \"Loan_in_1000_EUR\" = c(55,65,23,12,98,76)\n) \n\nThe data() command lists all sample data sets available in R. Let us have a look at the dataset mtcars. It is a dara.frame object and contains data on several aspects of 32 automobiles from 1974.\n\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nWith the function subset we can select variables and subsets of a dataframe. Let’s create a scatterplot of the variables mpg (miles per gallon) and wt weight (in 1000 lbs).\n\nplot(subset(mtcars, select = c(wt, mpg)))\n\n\n\n\n\n\n\nA data.frame is also useful in a time series context. Since time series data typically include a calendar date for each observation, the observation and date can be stored together as a data.frame. R provides the class Date for calendar dates, which can be generated with the function as.Date().\n\nd = as.Date(\"2021-04-01\") # a data object to store dates\nclass(d) # to get the object class\n\n[1] \"Date\"\n\nmyseries = c(16,17,18,16,15,19)\nmydates = seq.Date(as.Date(\"2021-04-01\"), by=1, length.out = 6)\nmytimeseries = data.frame(mydates, myseries)\nmytimeseries\n\n     mydates myseries\n1 2021-04-01       16\n2 2021-04-02       17\n3 2021-04-03       18\n4 2021-04-04       16\n5 2021-04-05       15\n6 2021-04-06       19\n\n\n\n1.4.4 The ts object\nA ts (time series) object is tailored explicitly to time series with a yearly time basis and an equidistant observation horizon, such as annual, quarterly, and monthly data. It assigns a specific year/quarter/month to each vector entry.\n\nmyts = ts(c(66, 76, 55, 12, 4, 66, 8, 99), start = 2020, frequency = 4)\nmyts\n\n     Qtr1 Qtr2 Qtr3 Qtr4\n2020   66   76   55   12\n2021    4   66    8   99\n\nanothertimeseries = ts(1:50, start = 2015, frequency = 12)\nanothertimeseries\n\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n2015   1   2   3   4   5   6   7   8   9  10  11  12\n2016  13  14  15  16  17  18  19  20  21  22  23  24\n2017  25  26  27  28  29  30  31  32  33  34  35  36\n2018  37  38  39  40  41  42  43  44  45  46  47  48\n2019  49  50                                        \n\n# The window() command selects the time series observations for a given subperiod\nwindow(anothertimeseries, start=2015.5, end=2017.5)\n\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n2015                           7   8   9  10  11  12\n2016  13  14  15  16  17  18  19  20  21  22  23  24\n2017  25  26  27  28  29  30  31                    \n\n\nThe data() command lists all sample data sets available in R. Let us have a look at the dataset AirPassengers. It is a ts object and contains data on monthly totals of international airline passengers from 1949 to 1960.\n\ndata() # lists all datasets currently loaded in the R environment\n?AirPassengers # get more information about the dataset\nAirPassengers\n\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n1949 112 118 132 129 121 135 148 148 136 119 104 118\n1950 115 126 141 135 125 149 170 170 158 133 114 140\n1951 145 150 178 163 172 178 199 199 184 162 146 166\n1952 171 180 193 181 183 218 230 242 209 191 172 194\n1953 196 196 236 235 229 243 264 272 237 211 180 201\n1954 204 188 235 227 234 264 302 293 259 229 203 229\n1955 242 233 267 269 270 315 364 347 312 274 237 278\n1956 284 277 317 313 318 374 413 405 355 306 271 306\n1957 315 301 356 348 355 422 465 467 404 347 305 336\n1958 340 318 362 348 363 435 491 505 404 359 310 337\n1959 360 342 406 396 420 472 548 559 463 407 362 405\n1960 417 391 419 461 472 535 622 606 508 461 390 432\n\nclass(AirPassengers)  # AirPassengers is a ts object\n\n[1] \"ts\"\n\nplot(AirPassengers)"
  },
  {
    "objectID": "packages.html#the-xts-package",
    "href": "packages.html#the-xts-package",
    "title": "\n2  Packages\n",
    "section": "\n2.1 The xts package",
    "text": "2.1 The xts package\nLet us look at a time series specific package: the xts package. It can be installed using the install.packages() function.\n\ninstall.packages(\"xts\")\n\nThe xts package provides the class xts, which has certain advantages over ts. A ts object can specify the frequency of a time series only as a portion of a year (1 for yearly, 4 for quarterly, 12 for monthly data). This scheme is convenient for regular macroeconomic time series but impractical for daily data (leap year problem), high-frequency data, or irregularly collected data. In an xts object, we are much more flexible and manually assign a specific time index to each observation in the time series.\nOnce installed, the package only has to be loaded at the beginning of a new R session, which is done with the command library(xts).\n\nlibrary(xts)\nmyts = ts(c(66, 76, 55, 12, 4, 66, 8, 99), start = 2020, frequency = 4)\nas.xts(myts)  # convert a ts object into an xts object\n\n        [,1]\n2020 Q1   66\n2020 Q2   76\n2020 Q3   55\n2020 Q4   12\n2021 Q1    4\n2021 Q2   66\n2021 Q3    8\n2021 Q4   99\n\n# we may assign irregular time points:\ndates = seq.Date(as.Date(\"2023-01-01\"), by = 7, length.out = 7)\ndates[8] = as.Date(\"2023-03-01\")\nmy.xts = xts(myts, dates)\nplot(my.xts)"
  },
  {
    "objectID": "packages.html#data-packages",
    "href": "packages.html#data-packages",
    "title": "\n2  Packages\n",
    "section": "\n2.2 Data packages",
    "text": "2.2 Data packages\nFor teaching, I have created the package teachingdata, which contains some current datasets. The package is not available on CRAN (your package must meet specific quality standards and go through a review process to be accepted there), but I have created a GitHub repository to make it accessible. We need the package remotes and its function install_github() to install a package from a GitHub repository.\n\ninstall.packages(\"remotes\")\nremotes::install_github(\"ottosven/teachingdata\")\n\nLet’s have a closer look at the data from the teachingdata package.\n\nlibrary(teachingdata)\ndata(package = \"teachingdata\")\nplot(gdp, main = \"Quarterly GDP Germany\")\n\n\n\n\n\n\nplot(infl, main=\"Monthly CPI inflation rate Germany\")\n\n\n\n\n\n\nplot(temp, main=\"Average temperature Germany\")\n\n\n\n\n\n\nplot(covidcases$date, covidcases$GER, type=\"l\", \n     main=\"Incidence number of reported Covid-19 infections Germany\")"
  },
  {
    "objectID": "packages.html#the-tidyverse",
    "href": "packages.html#the-tidyverse",
    "title": "\n2  Packages\n",
    "section": "\n2.3 The tidyverse\n",
    "text": "2.3 The tidyverse\n\nThe tidyverse is a collection of packages that lets you import, manipulate, explore, visualize, and model data in a harmonized and consistent way.\nInstalling the tidyverse package:\n\ninstall.packages(\"tidyverse\")\n\nIn this lecture, we will mainly use R to theoretically understand the learned statistical and econometric methods and apply them illustratively. For this purpose, base R is entirely sufficient. However, tidyverse has become state of the art for applied work with large data sets and is especially recommended for data management and visualization.\nTo give you a flavor of the tidyverse, let us briefly discuss the ggplot2 and tibble packages, which are part of the tidyverse.\n\nlibrary(tidyverse)\n\nNice plots can be produced using the R-package ggplot2. Let’s plot the iris dataset, which is contained in base R.\n\nclass(iris) # iris is a data.frame\n\n[1] \"data.frame\"\n\niris |&gt; \n  ggplot(aes(x = Sepal.Length, y = Petal.Length, color = Species)) + \n  geom_point()\n\n\n\n\n\n\n\nA data.frame in the tidyverse is called tibble. A tibble is sometimes more flexible and convenient for manipulating and printing data. Let’s transform the iris data frame into a tibble.\n\niris.tbl = as_tibble(iris) \niris.tbl # iris.tbl is a tibble\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n\n\nAs an extension, a tsibble object is a tibble with an additional time series structure. It contains a specific index variable corresponding to the observation’s time index. Let us convert the covidcases data into a tsibble. To visualize a tsibble we also need the fable package.\n\nlibrary(tsibble)\nlibrary(fable)\n\nIn a tsibble object, we can define so-called key variables, which define the subjects or individuals measured over time. Key variables also allow easy processing of panel data in R.\nIn the covidcases example, the key variables are the federal states, and the time series is the incidence numbers. Since a simultaneous display of the curves of all federal states would produce a very cluttered plot, we select only the total Germany, Nordrhein-Westfalen, and Berlin. The different steps can be represented in tidyverse as a sequence of multiple operations using the pipe operator |&gt; (other pipes like %&gt;%do a similar job).\n\ncovid.tsibble = as_tsibble(covidcases, index=date) |&gt;\n  pivot_longer(-date, names_to = \"state\", values_to = \"incidence\") |&gt;\n  filter(state %in% c(\"GER\", \"NW\", \"BE\"))\ncovid.tsibble\n\n# A tsibble: 1,563 x 3 [1D]\n# Key:       state [3]\n   date       state incidence\n   &lt;date&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 2021-09-11 BE         83.5\n 2 2021-09-11 NW        103. \n 3 2021-09-11 GER        82.7\n 4 2021-09-12 BE         84.3\n 5 2021-09-12 NW        101. \n 6 2021-09-12 GER        80.1\n 7 2021-09-13 BE         83.7\n 8 2021-09-13 NW         99.3\n 9 2021-09-13 GER        81.8\n10 2021-09-14 BE         84.9\n# ℹ 1,553 more rows\n\ncovid.tsibble |&gt;\n  autoplot(incidence) + theme(axis.title.x=element_blank())\n\n\n\n\n\n\n\nFor an introduction to the tidyverse and to learn more about the packages and functions used above, have a look at the book R for Data Science. To learn more about visualizing and analyzing time series data using the tsibble and fable packages, I recommend the textbook Forecasting: principles and practice."
  }
]